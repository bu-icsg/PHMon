diff --git a/arch/riscv/include/asm/irq.h b/arch/riscv/include/asm/irq.h
index 4dee9d4..cd8e713 100644
--- a/arch/riscv/include/asm/irq.h
+++ b/arch/riscv/include/asm/irq.h
@@ -20,6 +20,9 @@
 #define INTERRUPT_CAUSE_SOFTWARE    1
 #define INTERRUPT_CAUSE_TIMER       5
 #define INTERRUPT_CAUSE_EXTERNAL    9
+/* PHMon: begin */
+#define INTERRUPT_CAUSE_ROCC        12
+/* PHMon: end */
 
 void riscv_timer_interrupt(void);
 
diff --git a/arch/riscv/kernel/process.c b/arch/riscv/kernel/process.c
index d74d4ad..f946a73 100644
--- a/arch/riscv/kernel/process.c
+++ b/arch/riscv/kernel/process.c
@@ -76,7 +76,10 @@ void show_regs(struct pt_regs *regs)
 void start_thread(struct pt_regs *regs, unsigned long pc,
 	unsigned long sp)
 {
-	regs->sstatus = SR_SPIE /* User mode, irqs on */ | SR_FS_INITIAL;
+    /* PHMon: begin */
+	//regs->sstatus = SR_SPIE /* User mode, irqs on */ | SR_FS_INITIAL;
+    regs->sstatus = SR_SPIE /* User mode, irqs on */ | SR_FS_INITIAL | SR_XS_INITIAL;;
+    /* PHMon: end */
 	regs->sepc = pc;
 	regs->sp = sp;
 	set_fs(USER_DS);
diff --git a/arch/riscv/kernel/ptrace.c b/arch/riscv/kernel/ptrace.c
index ba3e807..9f82a7e 100644
--- a/arch/riscv/kernel/ptrace.c
+++ b/arch/riscv/kernel/ptrace.c
@@ -50,7 +50,7 @@ static int riscv_gpr_set(struct task_struct *target,
 	struct pt_regs *regs;
 
 	regs = task_pt_regs(target);
-	ret = user_regset_copyin(&pos, &count, &kbuf, &ubuf, &regs, 0, -1);
+	ret = user_regset_copyin(&pos, &count, &kbuf, &ubuf, regs, 0, -1);
 	return ret;
 }
 
diff --git a/arch/riscv/kernel/traps.c b/arch/riscv/kernel/traps.c
index 93132cb..75b79fa 100644
--- a/arch/riscv/kernel/traps.c
+++ b/arch/riscv/kernel/traps.c
@@ -149,7 +149,6 @@ asmlinkage void do_trap_break(struct pt_regs *regs)
 	}
 #endif /* CONFIG_GENERIC_BUG */

 	do_trap_siginfo(SIGTRAP, TRAP_BRKPT, regs->sepc, current);
-	regs->sepc += 0x4;
 }
 
diff --git a/drivers/irqchip/irq-riscv-intc.c b/drivers/irqchip/irq-riscv-intc.c
index fec897d..1b4ffb5 100644
--- a/drivers/irqchip/irq-riscv-intc.c
+++ b/drivers/irqchip/irq-riscv-intc.c
@@ -23,6 +23,9 @@
 #include <asm/ptrace.h>
 #include <asm/sbi.h>
 #include <asm/smp.h>
+/* PHMon: begin */
+#include <linux/varanus.h>
+/* PHMon: end */
 
 #define PTR_BITS (8 * sizeof(uintptr_t))
 
@@ -81,6 +84,32 @@ void riscv_intc_irq(struct pt_regs *regs)
 	case INTERRUPT_CAUSE_SOFTWARE:
 		riscv_software_interrupt();
 		break;
+    /* PHMon: begin */
+    case INTERRUPT_CAUSE_ROCC:
+      if (strcmp(current->comm, "ndisasm") != 0) {
+        printk("CATCH ROCC INTERRUPT\n");
+        kill_pid(find_vpid(current->pid), SIGQUIT, 1);
+      }
+      /*else if (strcmp(current->comm, "dump.rv") == 0) {
+        kill_pid(find_vpid(current->pid), SIGTRAP, 1);
+        kill_pid(find_vpid(current->pid), SIGKILL, 1);
+      }*/
+      else {
+        komodo_resume();
+        unsigned long varanus_done = 0;
+	    komodo_done_info(varanus_done);
+        int i = 0;
+        while (varanus_done != 0) {
+          i = 0;
+          while (i < 10000) {
+            i++;
+            asm volatile ("slli x0, x1, 0");
+          }
+          komodo_done_info(varanus_done);
+        }
+      }
+      break;
+    /* PHMon: end */
 	default:
 		domain = per_cpu(riscv_irq_data, smp_processor_id()).domain;
 		generic_handle_irq(irq_find_mapping(domain, cause));
@@ -89,6 +118,7 @@ void riscv_intc_irq(struct pt_regs *regs)
 
 	irq_exit();
 	set_irq_regs(old_regs);
+    /* PHMon: end */
 }
 
 static int riscv_irqdomain_map(struct irq_domain *d, unsigned int irq,
diff --git a/fs/Makefile b/fs/Makefile
index ef772f1..c44409c 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -12,7 +12,8 @@ obj-y :=	open.o read_write.o file_table.o super.o \
 		attr.o bad_inode.o file.o filesystems.o namespace.o \
 		seq_file.o xattr.o libfs.o fs-writeback.o \
 		pnode.o splice.o sync.o utimes.o \
-		stack.o fs_struct.o statfs.o fs_pin.o nsfs.o
+		stack.o fs_struct.o statfs.o fs_pin.o nsfs.o \
+		komodo.o
 
 ifeq ($(CONFIG_BLOCK),y)
 obj-y +=	buffer.o block_dev.o direct-io.o mpage.o
diff --git a/fs/exec.c b/fs/exec.c
index 7eb8d21..9ec1554 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -71,6 +71,9 @@
 #include "internal.h"
 
 #include <trace/events/sched.h>
+/* PHMon: begin */
+#include <linux/varanus.h>
+/* PHMon: end */
 
 int suid_dumpable = 0;
 
@@ -1803,6 +1806,15 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if (retval < 0)
 		goto out;
 
+    /* PHMon: begin */
+    if (!current->monitor_init & ((strcmp(current->comm, "cat") == 0) || (strcmp(current->comm, "hello.rv") == 0) || (strcmp(current->comm, "vuln1") == 0) || (strcmp(current->comm, "vuln3") == 0) || (strcmp(current->comm, "ndisasm") == 0 || strcmp(current->comm, "mcf.rv") == 0) || strcmp(current->comm, "debug.rv") == 0)) {
+      current->monitor_init = true;
+      current->monitor_enable = true;
+      current->maintain_state = false;
+      current->local1 = 0;
+    }
+    /* PHMon: end*/
+    
 	/* execve succeeded */
 	current->fs->in_exec = 0;
 	current->in_execve = 0;
@@ -1925,7 +1937,60 @@ SYSCALL_DEFINE3(execve,
 		const char __user *const __user *, argv,
 		const char __user *const __user *, envp)
 {
-	return do_execve(getname(filename), argv, envp);
+  /* PHMon: begin */
+  int res = do_execve(getname(filename), argv, envp);
+  if (current->monitor_enable) {
+    
+    if (strcmp(current->comm, "ndisasm") != 0) {
+      komodo_reset_all();
+      asm volatile ("nop");
+      current->local1 = vm_mmap(NULL, 0, 10*PAGE_SIZE, 0x3, 0x2 , 0);
+      current->local2 = (current->local1);
+      current->local3 = 0;
+      current->local4 = 0;
+      current->local5 = 0;
+      current->local6 = 0;
+      mm_populate(current->local1, 10*PAGE_SIZE);
+    }
+    
+    unsigned long cycles;
+    asm volatile ("rdcycle %0" : "=r" (cycles) ::);
+    asm volatile ("rdinstret %0" : "=r" (cycles) ::);
+    //printk("number of instr 0x%lx\n", cycles);
+    
+    //csr_set(sstatus, SR_SUM);
+    /*int i = 0;
+    for (i = 0; i < 4096; i++) {
+      *((unsigned long *) (i*PAGE_SIZE + current->local1)) = 0;
+    }*/
+    //csr_clear(sstatus, SR_SUM);
+    
+    if (strcmp(current->comm, "ndisasm") != 0) {
+      komodo_set_local_reg(0, (current->local1));
+      komodo_set_local_reg(1, (current->local1));
+      komodo_set_local_reg(2, (current->local3));
+      komodo_set_local_reg(3, (current->local4));
+      komodo_set_local_reg(4, (current->local5));
+      komodo_set_local_reg(5, (current->local6));
+    }
+    else {
+      komodo_set_local_reg(0, 0);
+      komodo_set_local_reg(1, 0);
+      komodo_set_local_reg(2, 0);
+      komodo_set_local_reg(3, 0);
+      komodo_set_local_reg(4, 0);
+      komodo_set_local_reg(5, 0);
+    }
+    getnstimeofday(&(current->t0));
+    printk("%s: t0 = %lld.%.9ld\n", current->comm, (long long)current->t0.tv_sec, current->t0.tv_nsec);
+    if (strcmp(current->comm, "ndisasm") != 0) {
+      komodo_enable_all();
+      asm volatile ("nop");
+    }
+  }
+  return res;
+  //return do_execve(getname(filename), argv, envp);
+  /* PHMon: end */
 }
 
 SYSCALL_DEFINE5(execveat,
diff --git a/include/linux/sched.h b/include/linux/sched.h
index d258826..8e9ae78 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -101,6 +101,12 @@ struct task_group;
 					 __TASK_TRACED | EXIT_DEAD | EXIT_ZOMBIE | \
 					 TASK_PARKED)
 
+/* PHMon: begin */
+#ifndef CONFIG_KOMODO
+#define CONFIG_KOMODO
+#endif
+/* PHMon: end */
+
 #define task_is_traced(task)		((task->state & __TASK_TRACED) != 0)
 
 #define task_is_stopped(task)		((task->state & __TASK_STOPPED) != 0)
@@ -517,6 +523,48 @@ struct wake_q_node {
 	struct wake_q_node *next;
 };
 
+/* PHMon: begin */
+// Data structure encapsulating everything communicated by one entry
+// in the commit log. This should match the `CommitLog` class from
+// src/main/scala/Varanus.scala.
+struct commit_log_t {
+  unsigned long pc_src;
+  unsigned long pc_dst;
+  unsigned int inst;
+  unsigned int priv;
+  unsigned long rd;
+  unsigned long data;
+};
+
+// Definition of a match on mask that can be used to match a specific
+// commit log. To enable matching of don't cares this requires two
+// masks, "care" and "don't care".
+struct mask_t {
+  struct commit_log_t care;
+  struct commit_log_t dont_care;
+};
+
+//-------------------------------------- Config Unit
+// Data structure encapsulating everything communicated by one entry
+// in the config table. This should match the `ActionConfigTable` class
+// from src/main/scala/ConfigUnit.scala.
+struct act_conf_table_t {
+  unsigned char op_type;
+  unsigned char in1;
+  unsigned char in2;
+  unsigned char fn;
+  unsigned char out;
+  unsigned long data;
+};
+
+struct phmon_info {
+  int index; /* commit index for action */
+  unsigned long action_count; /* number of actions */
+  struct act_conf_table_t action[16]; /* per monitor action list */
+  struct mask_t mu; /* The mu configuration */
+};
+/* PHMon: end */
+
 struct task_struct {
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 	/*
@@ -1097,6 +1145,22 @@ struct task_struct {
 	/* CPU-specific state of this task: */
 	struct thread_struct		thread;
 
+/* PHMon: begin */
+#ifdef CONFIG_KOMODO
+    bool monitor_init; /* indicates whether the monitoring process is initialized for the proc */
+    bool monitor_enable; /* per process monitoring enable flag */
+    bool maintain_state; /* state has been maintened once during context swicht */
+    struct phmon_info info[5]; /* per process monitoring info */
+    unsigned long local1;
+    unsigned long local2;
+    unsigned long local3;
+    unsigned long local4;
+    unsigned long local5;
+    unsigned long local6;
+    struct timespec t0,t1;
+#endif
+/* PHMon: end */
+
 	/*
 	 * WARNING: on x86, 'thread_struct' contains a variable-sized
 	 * structure.  It *MUST* be at the end of 'task_struct'.
diff --git a/kernel/exit.c b/kernel/exit.c
index 995453d..9de3b91 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -67,6 +67,9 @@
 #include <asm/unistd.h>
 #include <asm/pgtable.h>
 #include <asm/mmu_context.h>
+/* PHMon: begin */
+#include <linux/varanus.h>
+/* PHMon: end */
 
 static void __unhash_process(struct task_struct *p, bool group_dead)
 {
@@ -775,6 +778,30 @@ void __noreturn do_exit(long code)
 	if (unlikely(!tsk->pid))
 		panic("Attempted to kill the idle task!");
 
+    /* PHMon: begin */
+    if (current->monitor_init) {
+      unsigned long i = 0;
+      unsigned long varanus_done = 0;
+
+      current->monitor_init = false;
+      getnstimeofday(&(current->t1));
+      printk("%s: t1 = %lld.%.9ld\n", current->comm, (long long)current->t1.tv_sec, current->t1.tv_nsec);
+
+      /*current->local1 = komodo_info_sp_offset(0);
+      current->local2 = komodo_info_sp_offset(1);
+      current->local3 = komodo_info_sp_offset(2);
+      current->local4 = komodo_info_sp_offset(3);
+      current->local5 = komodo_info_sp_offset(4);
+      current->local6 = komodo_info_sp_offset(5);
+      printk("Exiting current thread[%s]: local1: 0x%lx local2: 0x%lx local3: 0x%lx local4: 0x%lx local5: 0x%lx local6: 0x%lx\n", current->comm, current->local1, current->local2, current->local3, current->local4, current->local5, current->local6);*/
+
+      if (strcmp(current->comm, "ndisasm") != 0) {
+        vm_munmap(current->local1, 10*PAGE_SIZE);
+      }
+      komodo_disable_all();
+    }
+    /* PHMon: end */
+
 	/*
 	 * If do_exit is called because this processes oopsed, it's possible
 	 * that get_fs() was left as KERNEL_DS, so reset it to USER_DS before
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index a7bf32a..f79ee16 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -38,6 +38,10 @@
 #include "sched.h"
 #include "../workqueue_internal.h"
 #include "../smpboot.h"
+/* PHMon: begin */
+#include <linux/varanus.h>
+#include <linux/delay.h>
+/* PHMon: end */
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/sched.h>
@@ -2761,6 +2765,52 @@ context_switch(struct rq *rq, struct task_struct *prev,
 {
 	struct mm_struct *mm, *oldmm;
 
+    if (prev->monitor_init) {
+      unsigned long wait_resp = 0, wait_req = 0;
+      komodo_disable_all();
+    
+      //getnstimeofday(&t0);
+      prev->local1 = komodo_info_sp_offset(0);
+      prev->local2 = komodo_info_sp_offset(1);
+      prev->local3 = komodo_info_sp_offset(2);
+      prev->local4 = komodo_info_sp_offset(3);
+      prev->local5 = komodo_info_sp_offset(4);
+      prev->local6 = komodo_info_sp_offset(5);
+      //printk("context switch from prev thread[%s]: local1: 0x%lx local2: 0x%lx local3: 0x%lx\n", prev->comm, prev->local1, prev->local2, prev->local3);
+      
+      // Maintaining the match bits and configuration 
+      int i, j, count = 0;
+      for (i = 0; i < 5; i++) {
+        prev->info[i].mu.care.pc_src = komodo_read_mask(i, e_SM_PC_SRC_CARE);
+        prev->info[i].mu.care.pc_dst = komodo_read_mask(i, e_SM_PC_DST_CARE);
+        prev->info[i].mu.care.inst = komodo_read_mask(i, e_SM_INST_CARE);
+        prev->info[i].mu.care.rd = komodo_read_mask(i, e_SM_RD_CARE);
+        prev->info[i].mu.care.data = komodo_read_mask(0, e_SM_DATA_CARE);
+        prev->info[i].mu.dont_care.pc_src = komodo_read_mask(i, e_SM_PC_SRC_DCARE);
+        prev->info[i].mu.dont_care.pc_dst = komodo_read_mask(i, e_SM_PC_DST_DCARE);
+        prev->info[i].mu.dont_care.inst = komodo_read_mask(i, e_SM_INST_DCARE);
+        prev->info[i].mu.dont_care.rd = komodo_read_mask(i, e_SM_RD_DCARE);
+        prev->info[i].mu.dont_care.data = komodo_read_mask(0, e_SM_DATA_DCARE);
+        prev->info[i].index = komodo_read_commit_index(i);
+        //printk(" Switch from %s: MU[%d]: pc_src.care: 0x%lx pc_src.dcare: 0x%lx pc_dst.care: 0x%lx pc_dst.dcare: 0x%lx inst.care: 0x%lx inst.dcare: 0x%lx rd.care: 0x%lx rd.dcare: 0x%lx date.care: 0x%lx data.dcare: 0x%lx\n", prev->comm, i, prev->info[i].mu.care.pc_src, prev->info[i].mu.dont_care.pc_src, prev->info[i].mu.care.pc_dst, prev->info[i].mu.dont_care.pc_dst, prev->info[i].mu.care.inst, prev->info[i].mu.dont_care.inst, prev->info[i].mu.care.rd, prev->info[i].mu.dont_care.rd, prev->info[i].mu.care.data, prev->info[i].mu.dont_care.data);
+      }
+      
+      for (i = 0; i < 5; i++) {
+        count = komodo_read_conf(i, e_SC_COUNT);
+        //printk("MU[%d] action count: %d\n", i, count);
+        prev->info[i].action_count = count;
+        for (j = 0 ; j < count; j++) {
+          prev->info[i].action[j].op_type = komodo_read_conf(i, e_SC_TYPE);
+          prev->info[i].action[j].in1 = komodo_read_conf(i, e_SC_IN1);
+          prev->info[i].action[j].in2 = komodo_read_conf(i, e_SC_IN2);
+          prev->info[i].action[j].fn = komodo_read_conf(i, e_SC_FN);
+          prev->info[i].action[j].out = komodo_read_conf(i, e_SC_OUT);
+          prev->info[i].action[j].data = komodo_read_conf(i, e_SC_DATA);
+          komodo_read_conf(i, e_SC_DONE);
+          //printk("Switch from: %s ; MU[%d] Conf[%d] op_type: %d in1: %d in2: %d fn: %d out: %d data: 0x%lx \n", prev->comm, i, j, prev->info[i].action[j].op_type, prev->info[i].action[j].in1, prev->info[i].action[j].in2, prev->info[i].action[j].fn, prev->info[i].action[j].out, prev->info[i].action[j].data);
+        }
+      }
+    }
 	prepare_task_switch(rq, prev, next);
 
 	mm = next->mm;
@@ -2798,8 +2848,46 @@ context_switch(struct rq *rq, struct task_struct *prev,
 	/* Here we just switch the register state and the stack. */
 	switch_to(prev, next, prev);
 	barrier();
-
-	return finish_task_switch(prev);
+    
+    /* PHMon: begin */
+    struct rq *rq_ret;
+    rq_ret = finish_task_switch(prev);
+
+    if (current->monitor_init) {
+      
+      /* Write back PHMon's state */
+      komodo_set_local_reg(0, (current->local1));
+      komodo_set_local_reg(1, (current->local2));
+      komodo_set_local_reg(2, (current->local3));
+      komodo_set_local_reg(3, (current->local4));
+      komodo_set_local_reg(4, (current->local5));
+      komodo_set_local_reg(5, (current->local6));
+      //printk("Context swithc to [%s]: local1: 0x%lx local2: 0x%lx local3: 0x%lx local4: 0x%lx local5: 0x%lx local6: 0x%lx\n", current->comm, current->local1, current->local2, current->local3, current->local4, current->local5, current->local6);
+      
+      int i, j, count = 0;
+      for (i = 0; i < 5; i++) {
+        komodo_pattern(i, (mask_t *)(&current->info[i].mu));
+        komodo_set_commit_index(i, current->info[i].index);
+        count = current->info[i].action_count;
+        for (j = 0; j < count; j++) {
+          komodo_action_config(i, (act_conf_table_t *) (&current->info[i].action[count-j-1]));
+          //printk("Switch to: %s ; MU[%d] Conf[%d] op_type: %d in1: %d in2: %d fn: %d out: %d data: 0x%lx \n", current->comm, i, j, current->info[i].action[j].op_type, current->info[i].action[j].in1, current->info[i].action[j].in2, current->info[i].action[j].fn, current->info[i].action[j].out, current->info[i].action[j].data);
+        }
+      }
+    /*                   */
+      
+      if (strcmp(current->comm, "ndisasm") != 0) {
+        komodo_enable_all();
+      }
+      else {
+        current->local1 = komodo_info_sp_offset(0);
+        if (current->local1 != 0) {
+          komodo_enable_all();
+        }
+      }
+    }
+    return rq_ret;
+    /* PHMon: end */
 }
 
 /*
